// docs: https://pris.ly/d/prisma-schema
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Code {
  id        String   @id @default(cuid())
  info      String //? data
  password  String?
  shorturl  String?  @unique
  image     String?  @db.Text
  userId    String?
  createdAt DateTime @default(now())

  User          User?           @relation(fields: [userId], references: [id])
  CodeStatistic CodeStatistic[]
}

model CodeStatistic {
  id        String   @id @default(cuid())
  codeId    String
  createdAt DateTime @default(now())

  Code Code @relation(fields: [codeId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  Code     Code[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
